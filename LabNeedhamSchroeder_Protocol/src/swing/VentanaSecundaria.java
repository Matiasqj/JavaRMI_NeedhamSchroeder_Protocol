/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swing;

import clientermi.ConexionRmi;
import interfaz.InterfazCliente;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import util.DES;

/**
 *
 * @author Matias Quinteros
 */
public class VentanaSecundaria extends javax.swing.JDialog {

    /**
     * Creates new form VentanaSecundaria
     */
    VentanaPrincipal inicio;//objeto de la ventana anterior
    public int id_usuario;//id del usuario que ingresa
    public String nombre_usuario;//nombre del usuario ingresado
    public ConexionRmi conexion;//objeto con la conexion a mysql
    public int mi_nonce;//nonce generado para la sesion
    private static VentanaSecundaria secundaria;//objeto de Ventana secundaria para poder actualizar componentes
    public String mipass;//pass ingresada al iniciar sesion
    DefaultListModel modelo_lista; //modelo para la lista de usuarios online
    public String ck = ""; //ck del servidor devuelto
    public String mensajepaso2 = "";//mensaje del paso 2
    public String usuario_destino ="";//usuario destino que se le envia
    public InterfazCliente cliente_a_enviar;//interfaz del cliente que se va a enviar msj
    public String usuario_que_envio="";//nombre de usuario que envio mensaje
    public int nonce_recibido;//nonce recibido en paso
    public InterfazCliente usuario_emisor; //interfaz cliente del cliente que envio un msj
    
    
    
    /**
     * Constructor
     * @param parent ventana padre
     * @param modal para poner la pagina a la mitad
     * @param inicio_sesion ventana de inicio de sesion
     * @param id
     * @param nombre
     * @param rmi valor de conexion de la bd
     * @param nonce
     * @param pass 
     */
    public VentanaSecundaria(java.awt.Frame parent, boolean modal, VentanaPrincipal inicio_sesion, int id, String nombre, ConexionRmi rmi, int nonce,String pass) {
        super(parent, modal);
        this.conexion = rmi;
        id_usuario = id;
        nombre_usuario = nombre;
        inicio = inicio_sesion;
        mi_nonce = nonce;
        mipass = pass;
        //inicia componentes y los setea
        initComponents();
        jLabel1.setText("Bienvenido " + nombre);
        CargarListaOnline(nombre);
        comenzar.setEnabled(false);
        paso2.setEnabled(false);
        paso3.setEnabled(false);
        paso4.setEnabled(false);
        paso5.setEnabled(false);
        secundaria = this;

        this.setLocationRelativeTo(null);
        this.setVisible(modal);
    }
    
    /**
     * Get para obtener objeto de Jframe de la ventana
     * @return 
     */
    public static VentanaSecundaria getVentanaSecundaria() {
        return secundaria;
    }
    /**
     * Comprueba si un suario corresponde a uno de la lista online de usuarios del modelo lista
     * @param usuario
     * @return 
     */
    public boolean ComprobarUsuario(String usuario){
        for(int i=0;i<modelo_lista.size();i++) //para cada valor del modelo ista
            if(modelo_lista.get(i).equals(usuario))//verifico si es verdadero
                return true;//retorno verdadero si lo encontro
        return false;//sino es falso
    }
    /**
     * Carga lista de usuarios online para ser mostrados en el modelo lista
     * @param minombre : para no repetirlo dentro de la lista
     */
    public void CargarListaOnline(String minombre) {
        modelo_lista = new DefaultListModel();//crea el nuevo objeto de modelo de lista
        try {
            ArrayList<String[]> lista = conexion.getOnlineUsers();//obtiene la lista de usuarios online del servidor llamado en conexionrmi
            for (int i = 0; i < lista.size(); i++) {//por cada elemento de la lista de usuarios online
                String auxiliar[] = lista.get(i);//guarda en un String[] auxiliar el valor obtenido
                if (!auxiliar[1].equals(minombre)) {//si no es igual mi nombre de usuario
                    modelo_lista.addElement(auxiliar[1]);//añado el elemento a la lista
                }
            }
            if (modelo_lista.getSize() == 0) {//Si no hay usuarios cargados , manda msj
                modelo_lista.addElement("No hay usuarios online");
            }
            //setea el modelo_lista en la lista de la ventana
            jList1.setModel(modelo_lista);
        } catch (RemoteException ex) {//error 
            System.out.println("error al cargar la lista");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        establecercomunicacion = new javax.swing.JButton();
        comenzar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Logmensajes = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        CerrarSesion = new javax.swing.JButton();
        infotext = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        paso2 = new javax.swing.JButton();
        paso3 = new javax.swing.JButton();
        paso4 = new javax.swing.JButton();
        paso5 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Bienvenido: ");

        jScrollPane1.setViewportView(jList1);

        jLabel2.setText("Usuarios Online:");

        establecercomunicacion.setText("Establecer Comunicación");
        establecercomunicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                establecercomunicacionMouseClicked(evt);
            }
        });

        comenzar.setText("Comenzar Chat");
        comenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comenzarActionPerformed(evt);
            }
        });

        Logmensajes.setEditable(false);
        Logmensajes.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        Logmensajes.setColumns(20);
        Logmensajes.setRows(5);
        jScrollPane2.setViewportView(Logmensajes);

        jLabel3.setText("Mensaje del servidor:");

        CerrarSesion.setText("Cerrar Sesion");
        CerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarSesionActionPerformed(evt);
            }
        });

        infotext.setText("Para establecer comunicación con un usuario seleccione uno de la lista y presione Comenzar");

        refresh.setText("Refrescar Lista");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        paso2.setText("Ver_Paso2");
        paso2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paso2ActionPerformed(evt);
            }
        });

        paso3.setText("Iniciar paso 3 {CK,A} clave: KB");
        paso3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paso3ActionPerformed(evt);
            }
        });

        paso4.setText("Recibido paso 4  Responder");
        paso4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paso4ActionPerformed(evt);
            }
        });

        paso5.setText("Recibido paso 5 Responder con {Ib-1} clave CK");
        paso5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paso5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(refresh)
                            .addComponent(establecercomunicacion))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addContainerGap(281, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(infotext, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CerrarSesion)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(paso2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(paso3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(paso4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(paso5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(comenzar))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CerrarSesion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(refresh)
                        .addGap(18, 18, 18)
                        .addComponent(establecercomunicacion))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infotext, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paso2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paso3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paso4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paso5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(comenzar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Luego de obtenido el paso 5 , manda mensaje de que fue un exito establecer conexion
 * @param evt 
 */
    private void comenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comenzarActionPerformed
        
            JOptionPane.showMessageDialog(rootPane, "Comunicación confiable!");
        


    }//GEN-LAST:event_comenzarActionPerformed
/**
 * Quita la ventana al inciar sesion
 * @param evt 
 */
    private void CerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarSesionActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_CerrarSesionActionPerformed
    /**
     * Refresca la lista de usuarios
     * @param evt 
     */
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        jList1.removeAll();//se eliminan todos
        CargarListaOnline(nombre_usuario); //carga la lista de usuarios nuevamente
    }//GEN-LAST:event_refreshActionPerformed
 
    /**
     * Algunos get and set
     * 
     */
    
    public int getNonce_recibido() {
        return nonce_recibido;
    }

    public void setNonce_recibido(int nonce_recibido) {
        this.nonce_recibido = nonce_recibido;
    }

    public String getMipass() {
        return mipass;
    }

    public void setMipass(String mipass) {
        this.mipass = mipass;
    }

    public String getCk() {
        return ck;
    }

    public void setCk(String ck) {
        this.ck = ck;
    }

    public String getUsuario_destino() {
        return usuario_destino;
    }

    public void setUsuario_destino(String usuario_destino) {
        this.usuario_destino = usuario_destino;
    }

    public String getUsuario_que_envio() {
        return usuario_que_envio;
    }

    public void setUsuario_que_envio(String usuario_que_envio) {
        this.usuario_que_envio = usuario_que_envio;
    }

    public InterfazCliente getUsuario_emisor() {
        return usuario_emisor;
    }

    public void setUsuario_emisor(InterfazCliente usuario_emisor) {
        this.usuario_emisor = usuario_emisor;
    }
    
    
    /***
     * Deja el boton del paso 4  para realizar accion
     */
    public void EnableBotonRecibidopaso4(){
    paso4.setEnabled(true);
    }
    /***
     * Deja el boton del paso 5  para realizar accion
     */
    public void EnableBotonRecibidopaso5(){
    paso5.setEnabled(true);
    }
    /***
     * Deja el boton de comenzar comunicacion  para realizar accion
     */
    public void EnableBotonComenzar(){
    comenzar.setEnabled(true);
    }
    
    
    /**
     * Funciones para actualizar LOG
     * 
     */
    
    /**
     * Actualiza el log con algun mensaje de entrada
     * @param mensaje 
     */
    public void ActualizarLogCliente(String mensaje){
        Logmensajes.append(mensaje+"\n");
    }
    /**
     * Accion para iniciar la comunicacion con algun otro usuario e iniciar el protocolo N-H
     * @param evt 
     */
    private void establecercomunicacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_establecercomunicacionMouseClicked
        String usuario = "";
        try {
            usuario = (String) jList1.getSelectedValue();//Captura el usuario seleccionado de la lista
            usuario_destino=usuario;//guardo el nombre del usuario destino
        } catch (Exception e) {//error al no seleccionar un usuario
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un usuario de la lista");
        }
        if (usuario == null || usuario.equals("")) {//error al no seleccionar un usuario
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un usuario de la lista");
        } else {//si se selecciono un usuario desde la lista de usuarios online
            try {//prueba:
                /**
                 * Actualiza mensajes del log
                 */
                Logmensajes.append("Intentado comunicación con el servidor" + "\n");
                Logmensajes.append("Nonce generado : " + mi_nonce + "\n");
                Logmensajes.append("Preparando para el servidor, usuario: " + nombre_usuario + ", usuario destino: " + usuario + ", nonce: " + mi_nonce + "\n");
                //Comienza el paso 2 y llama a conexionRmi para que se comunique con la intefaz del servidor
                String stringpaso2 = conexion.getPaso2Results(nombre_usuario, usuario, String.valueOf(mi_nonce));
                DES des = new DES();
                //desencripta el mensaje obtenido desde el paso 2
                String pa2 = des.desencriptado(mipass, stringpaso2);
                if (pa2 == null) {//Si hubo un error se notifica
                    Logmensajes.append("Ocurrió un error en la comunicación\n");
                } else {//si se recibio bien el mensaje
                    cliente_a_enviar = conexion.getServidor().cliente_mensaje(usuario_destino);//obtiene la interfaz del cliente a enviar
                    /**
                     * Actualiza mensajes del log
                     */
                    Logmensajes.append("Recibido del servidor :" + pa2.replace("#servidor#", " , ") + "\n");
                    Logmensajes.append("Desencriptando con clave... \n");
                    Scanner s = new Scanner(pa2).useDelimiter("#servidor#");//quita delimitadores
                    Logmensajes.append("( ");
                    int k = 0;
                    
                    while (s.hasNext()) {//sigue mostrando el mensaje obtenido con formato en el log

                        if (k == 2) {
                            ck = s.next();
                            Logmensajes.append(ck + " , ");
                        } else if (k == 3) {
                            mensajepaso2 = s.next();
                            Logmensajes.append(mensajepaso2 + " )");
                        } else {
                            Logmensajes.append(s.next() + " , ");
                        }
                        k++;

                    }
                    //cierra conexion
                    s.close();
                    
                    Logmensajes.append("\n");
                    //actualoiza los botones
                    //paso2.setEnabled(true);
                    paso3.setEnabled(true);
                }

            } catch (RemoteException ex) {//si hubo error
                Logger.getLogger(VentanaSecundaria.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
  

    }//GEN-LAST:event_establecercomunicacionMouseClicked

    private void paso2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paso2ActionPerformed
        // TODO add your handling code here:
        System.out.println("");
    }//GEN-LAST:event_paso2ActionPerformed

    private void paso3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paso3ActionPerformed
        // TODO add your handling code here:
        //ejecuta el paso3
        Logmensajes.append("Enviando al usuario : "+usuario_destino+" CK:"+ck+" y mi usuario: "+nombre_usuario+" encriptado con KB: "+mensajepaso2+"\n");
        
        try {
            conexion.Notificar(cliente_a_enviar,mensajepaso2);//Ejecuta la conexion con la interfaz cliente para ejecutar el paso3
        } catch (RemoteException ex) {
            Logger.getLogger(VentanaSecundaria.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_paso3ActionPerformed
    /**
     * Ejecuta accion del paso 4
     * @param evt 
     */
    private void paso4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paso4ActionPerformed
        // TODO add your handling code here:
        //System.out.println("sii");
        /**
         * Actualiza el log del apso 4
         */
        Logmensajes.append("Respondiendo el mensaje a : "+usuario_que_envio+"\n");
        Logmensajes.append("Encriptando mi nonce: "+mi_nonce+"con CK del servidor : "+ck+"\n");
        //encri´pta el mensaje con la clave de sesion y el nonce
        DES des = new DES();
        String mensaje_encriptado= des.encriptado(ck, String.valueOf(mi_nonce));
        Logmensajes.append("El mensaje encriptado a enviar es: "+mensaje_encriptado+"\n");
        
        try {//prueba la conexion con el cliente
            conexion.ResponderPaso4(usuario_emisor,mensaje_encriptado);//realiza el paso 4 conectandose con el cliente
        } catch (RemoteException ex) {//si ocurre un error
            Logger.getLogger(VentanaSecundaria.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_paso4ActionPerformed
/**
 * Realiza la accion del paso 5
 * @param evt 
 */
    private void paso5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paso5ActionPerformed
        // TODO add your handling code here:
        //System.out.println("ssss");
        //Actualiza el nonce
        Logmensajes.append("Enviando a : "+usuario_destino+ "su nonce-1"+"\n");
        //calcula el nonce-1 
        int nonce_aenviar = nonce_recibido-1;
        Logmensajes.append("Nonce recibido del paso 4: "+nonce_recibido+" nonce -1: "+nonce_aenviar+"\n");
        DES des = new DES();
        //encripta el ck con el valor del nonce
        String mensaje_encriptado = des.encriptado(ck,String.valueOf(nonce_aenviar) );
        Logmensajes.append("Enviado el mensaje encriptado: "+mensaje_encriptado+"\n");
        try {//prueba la conexion
            //trata de responder el paso5
            //envia la interfaz y el mesj encriptado
            conexion.ResponderPaso5(conexion.getCliente(),mensaje_encriptado);
        } catch (RemoteException ex) {
            //Logger.getLogger(VentanaSecundaria.class.getName()).log(Level.SEVERE, null, ex);
            Logmensajes.append("Ocurrio un error al enviar para el paso 5 \n");
        }
        
    }//GEN-LAST:event_paso5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CerrarSesion;
    private javax.swing.JTextArea Logmensajes;
    private javax.swing.JButton comenzar;
    private javax.swing.JButton establecercomunicacion;
    private javax.swing.JLabel infotext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton paso2;
    private javax.swing.JButton paso3;
    private javax.swing.JButton paso4;
    private javax.swing.JToggleButton paso5;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
